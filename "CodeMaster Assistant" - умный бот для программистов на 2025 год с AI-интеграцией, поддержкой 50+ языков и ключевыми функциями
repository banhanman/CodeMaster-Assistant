import os
import re
import json
import requests
from datetime import datetime
from typing import Dict, List, Optional
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏)
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
OPENAI_API_KEY = "YOUR_OPENAI_API_KEY"
GITHUB_TOKEN = "YOUR_GITHUB_TOKEN"

class CodeMasterBot:
    def __init__(self):
        self.commands = {
            "/start": "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
            "/help": "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã",
            "/code <–≤–æ–ø—Ä–æ—Å>": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è/–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
            "/doc <—è–∑—ã–∫> <–∑–∞–ø—Ä–æ—Å>": "–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
            "/convert <–∏—Å—Ö–æ–¥–Ω—ã–π> <—Ü–µ–ª–µ–≤–æ–π>": "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–¥–∞",
            "/explain": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞",
            "/bug": "–ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ",
            "/git <–∫–æ–º–∞–Ω–¥–∞>": "–†–∞–±–æ—Ç–∞ —Å GitHub",
            "/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        }
        self.reminders = {}
    
    def handle_message(self, message: str, user_id: int) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = message.strip()
        
        if message.startswith("/start"):
            return self._welcome_message()
        
        elif message.startswith("/help"):
            return self._show_help()
        
        elif message.startswith("/code"):
            return self._generate_code(message[5:].strip())
        
        elif message.startswith("/doc"):
            return self._search_docs(message[4:].strip())
        
        elif message.startswith("/convert"):
            return self._convert_code(message[8:].strip())
        
        elif message.startswith("/explain"):
            return "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"
        
        elif message.startswith("/bug"):
            return "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫"
        
        elif message.startswith("/git"):
            return self._handle_git(message[4:].strip())
        
        elif message.startswith("/remind"):
            return self._set_reminder(message[7:].strip(), user_id)
        
        elif "bug" in message.lower() or "–æ—à–∏–±–∫–∞" in message.lower():
            return self._find_bugs(message)
        
        elif "–æ–±—ä—è—Å–Ω–∏" in message.lower() or "explain" in message.lower():
            return self._explain_code(message)
        
        else:
            return self._general_response(message)
    
    def _welcome_message(self) -> str:
        return ("üöÄ –ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç! –Ø CodeMaster Assistant 2025\n"
                "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ 50+ —è–∑—ã–∫–∞—Ö\n"
                - –ê–Ω–∞–ª–∏–∑ –∏ –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫\n"
                - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏\n"
                - –†–∞–±–æ—Ç–∞ —Å GitHub\n"
                - –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ö\n"
                - –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
                "–ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
    
    def _show_help(self) -> str:
        return "\n".join([f"{cmd} - {desc}" for cmd, desc in self.commands.items()])
    
    def _generate_code(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ OpenAI API"""
        try:
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers={"Authorization": f"Bearer {OPENAI_API_KEY}"},
                json={
                    "model": "gpt-5-turbo",
                    "messages": [{"role": "user", "content": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–¥: {prompt}"}],
                    "max_tokens": 1000
                }
            )
            result = response.json()
            code = result['choices'][0]['message']['content']
            return f"```\n{code}\n```"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
    
    def _search_docs(self, query: str) -> str:
        """–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π
        langs = ["python", "javascript", "java", "c++", "rust", "go"]
        lang_match = re.search(r"(\w+)\s(.+)", query)
        
        if lang_match:
            lang, term = lang_match.groups()
            if lang.lower() in langs:
                return (f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è {lang.upper()} –ø–æ '{term}':\n"
                        f"https://{lang}.org/docs/{term.replace(' ', '_')}")
        return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /doc <—è–∑—ã–∫> <–∑–∞–ø—Ä–æ—Å>"
    
    def _convert_code(self, params: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–¥–∞ –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AST-–∞–Ω–∞–ª–∏–∑
        match = re.match(r"(\w+)\s+(\w+)\s+(.+)", params, re.DOTALL)
        if not match:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /convert <–∏—Å—Ö–æ–¥–Ω—ã–π_—è–∑—ã–∫> <—Ü–µ–ª–µ–≤–æ–π_—è–∑—ã–∫> <–∫–æ–¥>"
        
        src_lang, tgt_lang, code = match.groups()
        return f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {src_lang} ‚Üí {tgt_lang}:\n```{tgt_lang}\n// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n```"
    
    def _explain_code(self, code: str) -> str:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é AI"""
        return "ü§ñ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:\n" + self._call_ai_api(f"–û–±—ä—è—Å–Ω–∏ —ç—Ç–æ—Ç –∫–æ–¥:\n{code}")
    
    def _find_bugs(self, code: str) -> str:
        """–ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ"""
        return "üêõ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö:\n" + self._call_ai_api(f"–ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ:\n{code}")
    
    def _call_ai_api(self, prompt: str) -> str:
        """–û–±—â–∏–π –≤—ã–∑–æ–≤ AI API"""
        try:
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers={"Authorization": f"Bearer {OPENAI_API_KEY}"},
                json={
                    "model": "gpt-4-turbo",
                    "messages": [{"role": "user", "content": prompt}]
                }
            )
            return response.json()['choices'][0]['message']['content'][:2000]
        except:
            return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI-—Å–µ—Ä–≤–∏—Å—É"
    
    def _handle_git(self, command: str) -> str:
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GitHub"""
        # –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        cmd = command.split()[0].lower()
        if cmd == "auth":
            return "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è GitHub: https://github.com/login/oauth/authorize"
        elif cmd == "repo":
            return "https://github.com/username/repo"
        elif cmd == "pr":
            return "–°–ø–∏—Å–æ–∫ pull requests: ..."
        return "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: auth, repo, pr, issues"
    
    def _set_reminder(self, params: str, user_id: int) -> str:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            time_str, text = re.match(r"(\d{2}:\d{2})\s(.+)", params).groups()
            self.reminders[user_id] = {"time": time_str, "text": text}
            return f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}"
        except:
            return "–§–æ—Ä–º–∞—Ç: /remind –ß–ß:–ú–ú –¢–µ–∫—Å—Ç"

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º)
if __name__ == "__main__":
    bot = CodeMasterBot()
    print(bot.handle_message("/start", 123))
    print(bot.handle_message("/code Python quicksort", 123))
